// 先将l1和l2一位位比对，最后两个循环加入l1或l2中未加入的结点。
// 这题重点大概是在进位吧。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int sum = l1->val + l2->val;
        ListNode* result = new ListNode(sum);
        ListNode* cur = result;
        l1 = l1->next;
        l2 = l2->next;
        while(l1 != nullptr && l2 != nullptr)
        {
            sum = l1->val + l2->val + cur->val / 10;
            l1 = l1->next;
            l2 = l2->next;
            cur->next = new ListNode(sum);
            cur->val %= 10;
            cur = cur->next;
        }
        while(l1 != nullptr)
        {
            sum = l1->val + cur->val / 10;
            cur->next = new ListNode(sum);
            cur->val %= 10;
            l1 = l1->next;
            cur = cur->next;
        }
        while(l2 != nullptr)
        {
            sum = l2->val + cur->val / 10;
            cur->next = new ListNode(sum);
            cur->val %= 10;
            l2 = l2->next;
            cur = cur->next;
        }
        if(cur->val / 10)
        {
            cur->val %= 10;
            cur->next = new ListNode(1);
        }
        return result;
    }
};
