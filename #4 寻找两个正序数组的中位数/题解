[toc]

# 题解
这个题的题解其实有点瞎写的感觉，等我之后再来看看这道题吧。（这道题已经被我记录在案了）

## 第一想法

直接遍历`nums1`和`nums2`，中位数就在$$\frac{m+n}{2}$$的位置上，或者是$$\frac{m+n}{2}-1$$和$$\frac{m+n}{2}$$位置上两数的平均值。对于奇数情况，就相当于两个中位数都是同一个数。

拿`i`，`j`标识两个数组中已经加入排序的数的个数（也可以说是当前的下标），循环遍历直到加入排序的元素个数达到了一半，或者某个数组遍历完了，然后就按不同情况获得两个中间位置的数，求平均得到真正的中位数。

```c++
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        // i,j表示两个数组目前的下标位置，例如对i，表示nums1中的前i个数已经加入排序
        int i = 0, j = 0;
        int m = nums1.size(), n = nums2.size();
        float first = 0, second = 0;

        // 当已经到了中间的位置或者遍历完了其中一个数组（代表该数组中所有数已经加入了排序）
        while(i+j < (m+n)/2 && i < m && j < n)
        {
            if(nums1[i] >= nums2[j]) j++;
            else i++;
        }
        // 如果其中有一个数组遍历完了，就直接定位到中位数的位置
        if(i == m) j = (m+n)/2 - m;
        else if(j == n) i = (m+n)/2 - n;
        // 根据不同情况确定第一个中间位置的数
        if(i == 0 && j != 0) 
        {
            first = nums2[j-1];
        }
        else if(j == 0 && i != 0) 
        {
            first = nums1[i-1];
        }
        else if(i == 0 && j == 0)
        {
            if(m == 0) return nums2[0];
            else return nums1[0];
        }
        else 
        {
            if(nums1[i-1]>=nums2[j-1])
            {
                first = nums1[i-1];
            }
            else
            {
                first = nums2[j-1];
            }
        }
        // 确定第二个中间位置的数
        if(i == m) second = nums2[j];
        else if(j == n) second = nums1[i];
        else 
        {
            if(nums1[i]>=nums2[j])second = nums2[j];
            else second = nums1[i];
        }
        // 只有一个数
        if((m+n) % 2 == 1) first = second;
        return (first+second)/2;
    }
};
```

这种解法的时间复杂度为`O(m+n)`。



## 第二想法

因为题目里问有没有可能达到`O(log(m+n))`的时间复杂度，一想到的就是二分查找。

依然拿`i`和`j`标识`nums1`和`nums2`的位置，但不是从头遍历，而是按照二分查找的思想，不断缩小寻找范围。

问题是要如何缩小范围。题目中说时间复杂度为`O(log(m+n))`，猜测每次范围应该缩小$$\frac{(m+n)}{2^x}+c$$，其中c为0或1（根据数组数量偶数奇数而定），而且依靠直觉，刚开始搜索的时候，`nums1`应该定位在$$\frac{m}{2}$$的位置，`nums2`应该定位在$$\frac{n}{2}$$的位置。

对于`nums1[i]`和`nums2[j]`，进行分类讨论。注：应保持`i+j`是一个固定的值。

- 若`nums1[i]`>`nums2[j]`，则说明`nums1[i]`在合并的数组中的位置（非下标）一定在`i+j+1`之后，`nums2[j]`在`0~i+j`之间。
  - 若`nums2[j+1]>=nums1[i]`或者`j+1==n`，则`nums1[i]`就是第`i+j+1`个数。
  - 若（`i==0||nums1[i-1]<=nums2[j]`）且（`j+1==m||nums2[j+1]>=nums1[i]`），则`nums2[j]`就是第`i+j`个数。
- 若`nums1[i]`<`nums2[j]`，则与上述正好相反。
- 若`nums1[i]`=`nums2[j]`，则`nums1[i]`和`nums2[j]`在合并数组中的位置（非下标）就是`i+j+1`和`i+j+2`。这时候应该就能找到结果了。



阿巴阿巴说不下去了，感觉我这个做法有点问题（其实全程在瞎说），我自己没太想明白，O(log(m+n))的直接看官方的题解吧。

为什么不合并后再sort呢！（怒）

```c++
class Solution {
public:
    int getKthElement(const vector<int>& nums1, const vector<int>& nums2, int k) {
        /* 主要思路：要找到第 k (k>1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较
         * 这里的 "/" 表示整除
         * nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个
         * nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个
         * 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) <= k-2 个
         * 这样 pivot 本身最大也只能是第 k-1 小的元素
         * 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums1 数组
         * 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums2 数组
         * 由于我们 "删除" 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数
         */

        int m = nums1.size();
        int n = nums2.size();
        int index1 = 0, index2 = 0;

        while (true) {
            // 边界情况
            if (index1 == m) {
                return nums2[index2 + k - 1];
            }
            if (index2 == n) {
                return nums1[index1 + k - 1];
            }
            if (k == 1) {
                return min(nums1[index1], nums2[index2]);
            }

            // 正常情况
            int newIndex1 = min(index1 + k / 2 - 1, m - 1);
            int newIndex2 = min(index2 + k / 2 - 1, n - 1);
            int pivot1 = nums1[newIndex1];
            int pivot2 = nums2[newIndex2];
            if (pivot1 <= pivot2) {
                k -= newIndex1 - index1 + 1;
                index1 = newIndex1 + 1;
            }
            else {
                k -= newIndex2 - index2 + 1;
                index2 = newIndex2 + 1;
            }
        }
    }

    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int totalLength = nums1.size() + nums2.size();
        if (totalLength % 2 == 1) {
            return getKthElement(nums1, nums2, (totalLength + 1) / 2);
        }
        else {
            return (getKthElement(nums1, nums2, totalLength / 2) + getKthElement(nums1, nums2, totalLength / 2 + 1)) / 2.0;
        }
    }
};
```



## 第三想法

其实这个才是我第二个想到的办法...

也算是二分吧，但是复杂度是`O(log(min(m, n)))`。

开始时依然是定位在`nums1`和`nums2`的中间位置，对比两个数，对于较大数组，去掉中位数右边的$$\frac{min(m, n)}{2^x}$$，对于较小的数组，去掉中位数左边的$$\frac{min(m, n)}{2^x}$$。获得两个“新的”的数组后，重复上述步骤。

一直到最后，根据奇数偶数应该有两种情况。

如果是奇数，会有一个数组最后只剩1个元素，则合并数组的中位数就是剩下的那个数组的之间两个数和剩的那个元素三者之一。

如果是偶数，其实有一种特殊解法（就是懒得想太复杂的解法了=_=）。对比两个数组的第一个数，把最小的数去掉，再求中位数，得到第二个中间的数。然后放回最小的数，把最大的数去掉，再求中位数，得到的就是第一个中间的数。求平均就能够得到中位数。

时间复杂度就是两个数组中最快为空的速度，就是`O(log(min(m, n)))`。

想了个思路，最后还是没有自己写...看的题解。

```c++
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        // 这个操作有点意思
        if (nums1.size() > nums2.size()) {
            return findMedianSortedArrays(nums2, nums1);
        }
        
        int m = nums1.size();
        int n = nums2.size();
        int left = 0, right = m;
        // median1：前一部分的最大值
        // median2：后一部分的最小值
        int median1 = 0, median2 = 0;

        while (left <= right) {
            // 前一部分包含 nums1[0 .. i-1] 和 nums2[0 .. j-1]
            // 后一部分包含 nums1[i .. m-1] 和 nums2[j .. n-1]
            int i = (left + right) / 2;
            int j = (m + n + 1) / 2 - i;

            // nums_im1, nums_i, nums_jm1, nums_j 分别表示 nums1[i-1], nums1[i], nums2[j-1], nums2[j]
            int nums_im1 = (i == 0 ? INT_MIN : nums1[i - 1]);
            int nums_i = (i == m ? INT_MAX : nums1[i]);
            int nums_jm1 = (j == 0 ? INT_MIN : nums2[j - 1]);
            int nums_j = (j == n ? INT_MAX : nums2[j]);

            if (nums_im1 <= nums_j) {
                median1 = max(nums_im1, nums_jm1);
                median2 = min(nums_i, nums_j);
                left = i + 1;
            } else {
                right = i - 1;
            }
        }

        return (m + n) % 2 == 0 ? (median1 + median2) / 2.0 : median1;
    }
};
```

